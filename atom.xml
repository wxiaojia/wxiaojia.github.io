<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wxiaojia.github.io</id>
    <title>Gridea</title>
    <updated>2020-11-17T08:58:28.837Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wxiaojia.github.io"/>
    <link rel="self" href="https://wxiaojia.github.io/atom.xml"/>
    <subtitle>wxiaojia的学习库</subtitle>
    <logo>https://wxiaojia.github.io/images/avatar.png</logo>
    <icon>https://wxiaojia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[优雅的生成结构化的初始数据]]></title>
        <id>https://wxiaojia.github.io/you-ya-de-sheng-cheng-jie-gou-hua-de-chu-shi-shu-ju/</id>
        <link href="https://wxiaojia.github.io/you-ya-de-sheng-cheng-jie-gou-hua-de-chu-shi-shu-ju/">
        </link>
        <updated>2020-11-17T02:09:25.000Z</updated>
        <content type="html"><![CDATA[<p>传统的方法：<br>
function initialize(list) {<br>
for(let i = 0; i &lt; list.length; i++) {<br>
list[i] = 0;<br>
}<br>
return list;<br>
}<br>
const list = new Array(100);<br>
initialize(list);<br>
console.log(list); // [0, 0, ... 0]<br>
新建的数组 new Array（100） ，元素的初始值是empty,而迭代方法（foreach、map、some、every、filter、reduce）及for in并不会遍历数组中的empty元素，所以用这两种方法的初始化是不行的<br>
有效做法：<br>
const list =[..Array(100)].map(()=&gt;0)<br>
console.log(list) // [0,0,0,0,0,0,.....0,0,0]<br>
还可以用Array.from方法创建初始数组, 第二参数是迭代算子，所以不必+map转2次<br>
const list =Array.from({length:100},()=&gt;0)<br>
console.log(list) // [0,0,0,0,0,0,.....0,0,0]<br>
由于例子中初始化数组的初始值是固定的数值0，所以可以使用Array.prototype.fill方法<br>
const list =Array(100).fill(0)<br>
console.log(list) // [0,0,0,0,0,0,.....0,0,0]<br>
注意fill方法用来填充元素的值如果是引用类型，它并不会拷贝这个值，而是直接将引用赋给数组，这也就是说，如果我们企图通过fill来初始化二维数组，是有问题的<br>
const matrix = Array(3).fill(Array(3).fill(0));<br>
matrix[0][1] = 1;<br>
console.log(matrix); // [[0, 1, 0], [0, 1, 0], [0, 1, 0]]<br>
matrix[0]、matrix[1]和matrix[2]指向同一个引用</p>
<p>若想初始化一个长度10的数组，初始值分别0-9<br>
const list = [..Array(10).keys()]<br>
console.log(list)</p>
<p>生成器！！！<br>
只有mapFunc是生成器函数的时候，才用yield*迭代展开，否则直接yield返回。<br>
function <em>initializer(count, mapFunc = i =&gt; i) {<br>
for(let i = 0; i &lt; count; i++) {<br>
if(mapFunc.constructor.name === 'GeneratorFunction') {<br>
yield</em> mapFunc(i, count);<br>
} else {<br>
yield mapFunc(i, count);<br>
}<br>
}<br>
}<br>
const list = [...initializer(3, i =&gt; [0, 0, 0])];<br>
console.log(list); // [[0, 0, 0], [0, 0, 0], [0, 0, 0]]<br>
const mat3 = [...initializer(3, function *(i) {<br>
yield Number(i === 0);<br>
yield Number(i === 1);<br>
yield Number(i === 2);<br>
})]<br>
console.log(mat3); // [1, 0, 0, 0, 1, 0, 0, 0, 1]<br>
生成器是个好东西，比如：初始化扑克牌时，[花色，点数]（不包括大小王）<br>
const cards = [...initializer(13, function *(i) {<br>
const p = i + 1;<br>
yield ['♠️', p];<br>
yield ['♣️', p];<br>
yield ['♥️', p];<br>
yield ['♦️', p];<br>
})];<br>
console.log(cards);</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://wxiaojia.github.io/about/</id>
        <link href="https://wxiaojia.github.io/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wxiaojia.github.io/hello-gridea/</id>
        <link href="https://wxiaojia.github.io/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>